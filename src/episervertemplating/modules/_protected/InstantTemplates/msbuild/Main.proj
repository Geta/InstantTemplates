<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
    <!-- Thanks to Per Magne Skuseth for this solution: https://github.com/BVNetwork/InspectInIndex/blob/master/src/msbuild/Main.proj -->
    
    <UsingTask TaskName="ZipDirectory" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <InputPath ParameterType="System.String" Required="true" />
            <OutputFileName ParameterType="System.String" Required="true" />
            <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
        </ParameterGroup>
        <Task>
            <Reference Include=" System.IO.Compression.FileSystem" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.IO.Compression" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[        
                  if(this.OverwriteExistingFile) {
                    File.Delete(this.OutputFileName);
                  }
                  ZipFile.CreateFromDirectory(this.InputPath, this.OutputFileName);
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="GetVersion"
           TaskFactory="CodeTaskFactory"
           AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">

        <ParameterGroup>
            <AssemblyPath ParameterType="System.String" Required="true" />
            <Version ParameterType="System.String" Output="true" />
        </ParameterGroup>

        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Diagnostics" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                    Log.LogMessage("Getting version details of assembly at: " + this.AssemblyPath, MessageImportance.High);

                    this.Version = FileVersionInfo.GetVersionInfo(this.AssemblyPath).FileVersion;
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <PropertyGroup>
        <ProjectDir Condition="$(ProjectDir) == ''">$(MSBuildProjectDirectory)\..\</ProjectDir>
        <NuGetExe>$(ProjectDir)\.nuget\NuGet.exe</NuGetExe>
        <TmpOutDir>$(ProjectDir)\tmp</TmpOutDir>
        <NuspecFile>$(ProjectDir)\InstantTemplates.nuspec</NuspecFile>
    </PropertyGroup>

    <Target Name="CreateNugetPackage" AfterTargets="Build">
        <PropertyGroup>
            <Version></Version>
        </PropertyGroup>

        <GetVersion AssemblyPath="$(ProjectDir)bin\EPiServer.InstantTemplates.dll">
            <Output TaskParameter="Version" PropertyName="Version" />
        </GetVersion>

        <MakeDir Directories="$(TmpOutDir)\content\$(Version)" />

        <!-- Copy -->
        <ItemGroup>
            <ClientResources Include="$(ProjectDir)\ClientResources\**\*" />
            <ModuleOutFile Include="$(OutDir)\EPiServer-InstantTemplates.zip" />
            <ModuleBinFile Include="$(OutDir)\EPiServer.InstantTemplates.dll" />
        </ItemGroup>

        <Copy SourceFiles="$(ProjectDir)\module.config" DestinationFolder="$(TmpOutDir)\content" />
        <Copy SourceFiles="@(ClientResources)" DestinationFiles="@(ClientResources -> '$(TmpOutDir)\content\$(Version)\ClientResources\%(RecursiveDir)%(Filename)%(Extension)')"/>

        <!-- Update the module config with the version information -->
        <XmlPoke XmlInputPath="$(TmpOutDir)\content\module.config" Query="/module/@clientResourceRelativePath" Value="$(Version)" />

        <!-- Create the Zip file -->
        <ZipDirectory
          InputPath="$(TmpOutDir)\content"
          OutputFileName="$(TmpOutDir)\EPiServer-InstantTemplates.zip"
          OverwriteExistingFile="true" />

        <!-- Create the package -->
        <PropertyGroup>
            <NugetCommand>
              "$(NuGetExe)" pack "$(NuspecFile)" -Version "$(Version)-alpha" -Properties Configuration=$(Configuration)
            </NugetCommand>

        </PropertyGroup>
        <Exec Command="$(NugetCommand)"/>

        <!-- Cleanup -->
        <RemoveDir Directories="$(TmpOutDir)" />
    </Target>
</Project>